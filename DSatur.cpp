#include <iostream>
#include <vector>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>
#include <chrono>
#include <omp.h>

// Structure to represent an edge in the graph
struct Edge {
    int src, dest;
};

std::vector<Edge> getEdgesForGraph50() {
    std::vector<Edge> edges = {
        {15, 30},
        {15, 41},
        {15, 29},
        {15, 22},
        {15, 7},
        {30, 15},
        {30, 17},
        {30, 39},
        {30, 5},
        {30, 25},
        {19, 46},
        {19, 20},
        {19, 12},
        {19, 44},
        {19, 11},
        {46, 19},
        {46, 36},
        {46, 18},
        {46, 49},
        {46, 6},
        {10, 43},
        {10, 47},
        {10, 28},
        {10, 39},
        {10, 0},
        {43, 10},
        {43, 26},
        {43, 18},
        {43, 7},
        {43, 39},
        {42, 48},
        {42, 14},
        {42, 16},
        {42, 49},
        {42, 29},
        {48, 42},
        {48, 36},
        {48, 24},
        {48, 35},
        {48, 20},
        {25, 41},
        {25, 8},
        {25, 40},
        {25, 49},
        {25, 30},
        {41, 25},
        {41, 4},
        {41, 15},
        {41, 22},
        {41, 12},
        {22, 26},
        {22, 14},
        {22, 35},
        {22, 41},
        {22, 15},
        {26, 22},
        {26, 12},
        {26, 43},
        {26, 36},
        {26, 4},
        {14, 22},
        {14, 42},
        {14, 35},
        {14, 21},
        {14, 45},
        {20, 38},
        {20, 19},
        {20, 48},
        {20, 7},
        {20, 27},
        {38, 20},
        {38, 21},
        {38, 28},
        {38, 32},
        {38, 18},
        {35, 22},
        {35, 37},
        {35, 14},
        {35, 39},
        {35, 48},
        {23, 34},
        {23, 45},
        {23, 40},
        {23, 9},
        {23, 39},
        {34, 23},
        {34, 17},
        {34, 9},
        {34, 1},
        {34, 40},
        {17, 30},
        {17, 16},
        {17, 34},
        {17, 27},
        {17, 31},
        {36, 46},
        {36, 48},
        {36, 45},
        {36, 26},
        {36, 37},
        {39, 30},
        {39, 35},
        {39, 10},
        {39, 43},
        {39, 23},
        {1, 33},
        {1, 5},
        {1, 34},
        {1, 45},
        {1, 0},
        {33, 1},
        {33, 47},
        {33, 2},
        {33, 11},
        {33, 5},
        {47, 33},
        {47, 10},
        {47, 2},
        {47, 21},
        {47, 13},
        {7, 28},
        {7, 37},
        {7, 43},
        {7, 20},
        {7, 15},
        {28, 7},
        {28, 24},
        {28, 10},
        {28, 38},
        {28, 2},
        {24, 44},
        {24, 28},
        {24, 48},
        {24, 4},
        {24, 31},
        {44, 24},
        {44, 11},
        {44, 3},
        {44, 19},
        {44, 8},
        {11, 44},
        {11, 8},
        {11, 33},
        {11, 19},
        {11, 21},
        {3, 6},
        {3, 44},
        {3, 4},
        {3, 27},
        {3, 0},
        {6, 3},
        {6, 29},
        {6, 37},
        {6, 46},
        {6, 9},
        {37, 7},
        {37, 13},
        {37, 35},
        {37, 6},
        {37, 36},
        {16, 49},
        {16, 42},
        {16, 17},
        {16, 32},
        {16, 4},
        {49, 16},
        {49, 27},
        {49, 42},
        {49, 46},
        {49, 25},
        {8, 11},
        {8, 25},
        {8, 29},
        {8, 44},
        {8, 12},
        {5, 30},
        {5, 32},
        {5, 1},
        {5, 45},
        {5, 33},
        {45, 23},
        {45, 36},
        {45, 5},
        {45, 1},
        {45, 14},
        {4, 41},
        {4, 24},
        {4, 26},
        {4, 3},
        {4, 16},
        {13, 37},
        {13, 12},
        {13, 29},
        {13, 47},
        {13, 31},
        {32, 5},
        {32, 18},
        {32, 38},
        {32, 40},
        {32, 16},
        {12, 13},
        {12, 26},
        {12, 19},
        {12, 8},
        {12, 41},
        {40, 23},
        {40, 25},
        {40, 0},
        {40, 32},
        {40, 34},
        {27, 49},
        {27, 17},
        {27, 9},
        {27, 3},
        {27, 20},
        {2, 47},
        {2, 31},
        {2, 33},
        {2, 28},
        {2, 21},
        {29, 6},
        {29, 8},
        {29, 42},
        {29, 15},
        {29, 13},
        {21, 14},
        {21, 38},
        {21, 47},
        {21, 2},
        {21, 11},
        {18, 46},
        {18, 32},
        {18, 43},
        {18, 9},
        {18, 38},
        {31, 2},
        {31, 0},
        {31, 17},
        {31, 24},
        {31, 13},
        {9, 23},
        {9, 34},
        {9, 18},
        {9, 27},
        {9, 6},
        {0, 31},
        {0, 40},
        {0, 1},
        {0, 10},
        {0, 3}
    };

    return edges;
}

std::vector<Edge> getEdgesForGraph100() {
    std::vector<Edge> edges = {
        {36, 80},
        {36, 10},
        {36, 98},
        {36, 45},
        {36, 28},
        {36, 49},
        {36, 9},
        {36, 4},
        {36, 26},
        {36, 99},
        {80, 36},
        {80, 12},
        {80, 75},
        {80, 83},
        {80, 54},
        {80, 91},
        {80, 65},
        {80, 49},
        {80, 3},
        {80, 33},
        {29, 41},
        {29, 30},
        {29, 1},
        {29, 20},
        {29, 76},
        {29, 71},
        {29, 52},
        {29, 33},
        {29, 98},
        {29, 65},
        {41, 29},
        {41, 39},
        {41, 60},
        {41, 82},
        {41, 58},
        {41, 44},
        {41, 20},
        {41, 81},
        {41, 7},
        {41, 70},
        {48, 54},
        {48, 17},
        {48, 53},
        {48, 12},
        {48, 86},
        {48, 67},
        {48, 62},
        {48, 10},
        {48, 74},
        {48, 44},
        {54, 48},
        {54, 74},
        {54, 21},
        {54, 69},
        {54, 72},
        {54, 90},
        {54, 6},
        {54, 80},
        {54, 53},
        {54, 15},
        {40, 59},
        {40, 10},
        {40, 57},
        {40, 70},
        {40, 25},
        {40, 39},
        {40, 93},
        {40, 88},
        {40, 83},
        {40, 46},
        {59, 40},
        {59, 68},
        {59, 32},
        {59, 14},
        {59, 55},
        {59, 6},
        {59, 42},
        {59, 4},
        {59, 84},
        {59, 88},
        {92, 97},
        {92, 24},
        {92, 71},
        {92, 6},
        {92, 77},
        {92, 69},
        {92, 26},
        {92, 67},
        {92, 2},
        {92, 32},
        {97, 92},
        {97, 11},
        {97, 44},
        {97, 93},
        {97, 45},
        {97, 56},
        {97, 10},
        {97, 89},
        {97, 5},
        {97, 73},
        {21, 55},
        {21, 64},
        {21, 54},
        {21, 26},
        {21, 30},
        {21, 77},
        {21, 76},
        {21, 24},
        {21, 89},
        {21, 60},
        {55, 21},
        {55, 32},
        {55, 60},
        {55, 22},
        {55, 88},
        {55, 3},
        {55, 59},
        {55, 1},
        {55, 34},
        {55, 7},
        {64, 21},
        {64, 5},
        {64, 85},
        {64, 8},
        {64, 38},
        {64, 22},
        {64, 65},
        {64, 93},
        {64, 73},
        {64, 15},
        {10, 36},
        {10, 40},
        {10, 4},
        {10, 62},
        {10, 48},
        {10, 52},
        {10, 37},
        {10, 88},
        {10, 97},
        {10, 87},
        {20, 86},
        {20, 70},
        {20, 29},
        {20, 93},
        {20, 79},
        {20, 73},
        {20, 41},
        {20, 58},
        {20, 11},
        {20, 14},
        {86, 20},
        {86, 12},
        {86, 75},
        {86, 37},
        {86, 48},
        {86, 67},
        {86, 5},
        {86, 33},
        {86, 72},
        {86, 91},
        {39, 99},
        {39, 94},
        {39, 47},
        {39, 65},
        {39, 41},
        {39, 7},
        {39, 27},
        {39, 6},
        {39, 40},
        {39, 95},
        {99, 39},
        {99, 18},
        {99, 7},
        {99, 51},
        {99, 62},
        {99, 84},
        {99, 98},
        {99, 60},
        {99, 36},
        {99, 66},
        {32, 60},
        {32, 55},
        {32, 59},
        {32, 58},
        {32, 95},
        {32, 28},
        {32, 61},
        {32, 23},
        {32, 98},
        {32, 92},
        {60, 32},
        {60, 55},
        {60, 41},
        {60, 63},
        {60, 4},
        {60, 99},
        {60, 15},
        {60, 18},
        {60, 98},
        {60, 21},
        {14, 24},
        {14, 33},
        {14, 19},
        {14, 93},
        {14, 74},
        {14, 46},
        {14, 59},
        {14, 25},
        {14, 90},
        {14, 20},
        {24, 14},
        {24, 74},
        {24, 92},
        {24, 69},
        {24, 85},
        {24, 66},
        {24, 21},
        {24, 70},
        {24, 5},
        {24, 84},
        {23, 91},
        {23, 90},
        {23, 58},
        {23, 25},
        {23, 12},
        {23, 88},
        {23, 78},
        {23, 82},
        {23, 32},
        {23, 50},
        {91, 23},
        {91, 42},
        {91, 15},
        {91, 34},
        {91, 94},
        {91, 38},
        {91, 80},
        {91, 53},
        {91, 83},
        {91, 86},
        {51, 73},
        {51, 72},
        {51, 16},
        {51, 25},
        {51, 99},
        {51, 85},
        {51, 57},
        {51, 61},
        {51, 42},
        {51, 4},
        {73, 51},
        {73, 78},
        {73, 5},
        {73, 27},
        {73, 0},
        {73, 95},
        {73, 20},
        {73, 64},
        {73, 7},
        {73, 97},
        {33, 14},
        {33, 42},
        {33, 63},
        {33, 49},
        {33, 29},
        {33, 86},
        {33, 19},
        {33, 53},
        {33, 80},
        {33, 11},
        {66, 71},
        {66, 50},
        {66, 15},
        {66, 24},
        {66, 49},
        {66, 22},
        {66, 52},
        {66, 3},
        {66, 81},
        {66, 99},
        {71, 66},
        {71, 15},
        {71, 92},
        {71, 78},
        {71, 87},
        {71, 96},
        {71, 29},
        {71, 30},
        {71, 95},
        {71, 94},
        {1, 72},
        {1, 85},
        {1, 62},
        {1, 29},
        {1, 19},
        {1, 88},
        {1, 55},
        {1, 49},
        {1, 26},
        {1, 35},
        {72, 1},
        {72, 95},
        {72, 51},
        {72, 4},
        {72, 75},
        {72, 68},
        {72, 22},
        {72, 54},
        {72, 69},
        {72, 86},
        {74, 24},
        {74, 54},
        {74, 16},
        {74, 65},
        {74, 11},
        {74, 14},
        {74, 48},
        {74, 95},
        {74, 67},
        {74, 43},
        {18, 30},
        {18, 81},
        {18, 99},
        {18, 85},
        {18, 43},
        {18, 17},
        {18, 79},
        {18, 2},
        {18, 60},
        {18, 27},
        {30, 18},
        {30, 29},
        {30, 21},
        {30, 96},
        {30, 82},
        {30, 68},
        {30, 8},
        {30, 94},
        {30, 71},
        {30, 56},
        {68, 59},
        {68, 13},
        {68, 83},
        {68, 30},
        {68, 72},
        {68, 89},
        {68, 98},
        {68, 84},
        {68, 79},
        {68, 45},
        {70, 77},
        {70, 47},
        {70, 0},
        {70, 20},
        {70, 63},
        {70, 76},
        {70, 40},
        {70, 24},
        {70, 79},
        {70, 41},
        {77, 70},
        {77, 85},
        {77, 21},
        {77, 92},
        {77, 38},
        {77, 61},
        {77, 63},
        {77, 17},
        {77, 28},
        {77, 9},
        {47, 75},
        {47, 84},
        {47, 70},
        {47, 9},
        {47, 39},
        {47, 98},
        {47, 15},
        {47, 2},
        {47, 0},
        {47, 76},
        {75, 47},
        {75, 0},
        {75, 86},
        {75, 72},
        {75, 26},
        {75, 80},
        {75, 56},
        {75, 7},
        {75, 79},
        {75, 83},
        {84, 47},
        {84, 28},
        {84, 42},
        {84, 5},
        {84, 99},
        {84, 45},
        {84, 68},
        {84, 59},
        {84, 79},
        {84, 24},
        {85, 77},
        {85, 1},
        {85, 64},
        {85, 26},
        {85, 18},
        {85, 51},
        {85, 24},
        {85, 13},
        {85, 46},
        {85, 63},
        {42, 91},
        {42, 33},
        {42, 6},
        {42, 90},
        {42, 44},
        {42, 34},
        {42, 84},
        {42, 51},
        {42, 59},
        {42, 49},
        {2, 27},
        {2, 8},
        {2, 17},
        {2, 76},
        {2, 94},
        {2, 44},
        {2, 47},
        {2, 18},
        {2, 83},
        {2, 92},
        {27, 2},
        {27, 73},
        {27, 50},
        {27, 58},
        {27, 39},
        {27, 95},
        {27, 81},
        {27, 34},
        {27, 56},
        {27, 18},
        {78, 73},
        {78, 76},
        {78, 57},
        {78, 38},
        {78, 22},
        {78, 90},
        {78, 71},
        {78, 23},
        {78, 56},
        {78, 82},
        {94, 39},
        {94, 69},
        {94, 91},
        {94, 34},
        {94, 7},
        {94, 2},
        {94, 62},
        {94, 30},
        {94, 22},
        {94, 71},
        {19, 14},
        {19, 82},
        {19, 9},
        {19, 1},
        {19, 22},
        {19, 26},
        {19, 58},
        {19, 67},
        {19, 5},
        {19, 33},
        {12, 86},
        {12, 80},
        {12, 48},
        {12, 15},
        {12, 23},
        {12, 69},
        {12, 6},
        {12, 49},
        {12, 35},
        {12, 96},
        {4, 82},
        {4, 72},
        {4, 90},
        {4, 10},
        {4, 51},
        {4, 60},
        {4, 59},
        {4, 36},
        {4, 8},
        {4, 17},
        {82, 4},
        {82, 19},
        {82, 30},
        {82, 41},
        {82, 61},
        {82, 23},
        {82, 25},
        {82, 56},
        {82, 7},
        {82, 78},
        {3, 37},
        {3, 87},
        {3, 55},
        {3, 13},
        {3, 35},
        {3, 44},
        {3, 96},
        {3, 62},
        {3, 80},
        {3, 66},
        {37, 3},
        {37, 6},
        {37, 86},
        {37, 11},
        {37, 52},
        {37, 10},
        {37, 13},
        {37, 65},
        {37, 83},
        {37, 8},
        {69, 24},
        {69, 94},
        {69, 54},
        {69, 46},
        {69, 11},
        {69, 92},
        {69, 31},
        {69, 12},
        {69, 72},
        {69, 45},
        {16, 74},
        {16, 7},
        {16, 51},
        {16, 8},
        {16, 95},
        {16, 25},
        {16, 34},
        {16, 6},
        {16, 38},
        {16, 9},
        {7, 16},
        {7, 99},
        {7, 94},
        {7, 39},
        {7, 57},
        {7, 75},
        {7, 55},
        {7, 73},
        {7, 82},
        {7, 41},
        {17, 48},
        {17, 34},
        {17, 2},
        {17, 65},
        {17, 50},
        {17, 18},
        {17, 35},
        {17, 4},
        {17, 77},
        {17, 90},
        {9, 53},
        {9, 62},
        {9, 38},
        {9, 47},
        {9, 19},
        {9, 89},
        {9, 79},
        {9, 36},
        {9, 16},
        {9, 77},
        {53, 9},
        {53, 48},
        {53, 56},
        {53, 88},
        {53, 8},
        {53, 87},
        {53, 11},
        {53, 91},
        {53, 54},
        {53, 33},
        {5, 64},
        {5, 73},
        {5, 63},
        {5, 86},
        {5, 81},
        {5, 84},
        {5, 61},
        {5, 24},
        {5, 19},
        {5, 97},
        {62, 9},
        {62, 1},
        {62, 50},
        {62, 48},
        {62, 10},
        {62, 90},
        {62, 99},
        {62, 94},
        {62, 13},
        {62, 3},
        {50, 81},
        {50, 13},
        {50, 62},
        {50, 66},
        {50, 27},
        {50, 98},
        {50, 25},
        {50, 17},
        {50, 23},
        {50, 63},
        {81, 50},
        {81, 18},
        {81, 5},
        {81, 35},
        {81, 76},
        {81, 27},
        {81, 41},
        {81, 44},
        {81, 66},
        {81, 83},
        {95, 72},
        {95, 32},
        {95, 73},
        {95, 16},
        {95, 27},
        {95, 0},
        {95, 98},
        {95, 71},
        {95, 74},
        {95, 39},
        {90, 23},
        {90, 42},
        {90, 4},
        {90, 78},
        {90, 62},
        {90, 54},
        {90, 8},
        {90, 52},
        {90, 14},
        {90, 17},
        {65, 74},
        {65, 39},
        {65, 31},
        {65, 67},
        {65, 64},
        {65, 28},
        {65, 17},
        {65, 80},
        {65, 37},
        {65, 29},
        {34, 17},
        {34, 91},
        {34, 94},
        {34, 42},
        {34, 13},
        {34, 16},
        {34, 83},
        {34, 27},
        {34, 55},
        {34, 35},
        {57, 79},
        {57, 78},
        {57, 7},
        {57, 40},
        {57, 51},
        {57, 13},
        {57, 67},
        {57, 61},
        {57, 49},
        {57, 44},
        {79, 57},
        {79, 46},
        {79, 87},
        {79, 9},
        {79, 20},
        {79, 18},
        {79, 75},
        {79, 68},
        {79, 70},
        {79, 84},
        {46, 79},
        {46, 69},
        {46, 96},
        {46, 0},
        {46, 14},
        {46, 28},
        {46, 85},
        {46, 43},
        {46, 56},
        {46, 40},
        {28, 61},
        {28, 84},
        {28, 88},
        {28, 65},
        {28, 46},
        {28, 32},
        {28, 36},
        {28, 96},
        {28, 77},
        {28, 0},
        {61, 28},
        {61, 89},
        {61, 58},
        {61, 45},
        {61, 51},
        {61, 32},
        {61, 5},
        {61, 82},
        {61, 77},
        {61, 57},
        {15, 91},
        {15, 71},
        {15, 66},
        {15, 12},
        {15, 43},
        {15, 38},
        {15, 47},
        {15, 60},
        {15, 64},
        {15, 54},
        {6, 42},
        {6, 37},
        {6, 98},
        {6, 92},
        {6, 59},
        {6, 54},
        {6, 31},
        {6, 12},
        {6, 39},
        {6, 16},
        {58, 89},
        {58, 23},
        {58, 32},
        {58, 61},
        {58, 35},
        {58, 27},
        {58, 41},
        {58, 87},
        {58, 19},
        {58, 20},
        {89, 58},
        {89, 88},
        {89, 61},
        {89, 45},
        {89, 9},
        {89, 68},
        {89, 21},
        {89, 97},
        {89, 52},
        {89, 96},
        {8, 2},
        {8, 64},
        {8, 31},
        {8, 30},
        {8, 16},
        {8, 96},
        {8, 90},
        {8, 53},
        {8, 4},
        {8, 37},
        {0, 75},
        {0, 93},
        {0, 70},
        {0, 83},
        {0, 46},
        {0, 73},
        {0, 95},
        {0, 63},
        {0, 47},
        {0, 28},
        {93, 0},
        {93, 22},
        {93, 14},
        {93, 97},
        {93, 20},
        {93, 64},
        {93, 76},
        {93, 40},
        {93, 43},
        {93, 35},
        {43, 45},
        {43, 63},
        {43, 26},
        {43, 15},
        {43, 18},
        {43, 52},
        {43, 13},
        {43, 46},
        {43, 93},
        {43, 74},
        {45, 43},
        {45, 89},
        {45, 52},
        {45, 61},
        {45, 36},
        {45, 84},
        {45, 97},
        {45, 69},
        {45, 87},
        {45, 68},
        {13, 50},
        {13, 68},
        {13, 11},
        {13, 3},
        {13, 85},
        {13, 62},
        {13, 57},
        {13, 34},
        {13, 43},
        {13, 37},
        {63, 43},
        {63, 5},
        {63, 70},
        {63, 60},
        {63, 33},
        {63, 0},
        {63, 31},
        {63, 50},
        {63, 77},
        {63, 85},
        {76, 78},
        {76, 67},
        {76, 29},
        {76, 2},
        {76, 70},
        {76, 21},
        {76, 81},
        {76, 93},
        {76, 49},
        {76, 47},
        {88, 89},
        {88, 25},
        {88, 55},
        {88, 28},
        {88, 1},
        {88, 23},
        {88, 53},
        {88, 10},
        {88, 40},
        {88, 59},
        {83, 68},
        {83, 0},
        {83, 80},
        {83, 34},
        {83, 75},
        {83, 37},
        {83, 91},
        {83, 40},
        {83, 2},
        {83, 81},
        {26, 21},
        {26, 85},
        {26, 75},
        {26, 43},
        {26, 56},
        {26, 19},
        {26, 22},
        {26, 92},
        {26, 1},
        {26, 36},
        {11, 97},
        {11, 74},
        {11, 69},
        {11, 37},
        {11, 13},
        {11, 31},
        {11, 53},
        {11, 25},
        {11, 20},
        {11, 33},
        {22, 93},
        {22, 78},
        {22, 55},
        {22, 64},
        {22, 19},
        {22, 72},
        {22, 26},
        {22, 94},
        {22, 66},
        {22, 38},
        {38, 9},
        {38, 78},
        {38, 64},
        {38, 15},
        {38, 91},
        {38, 77},
        {38, 35},
        {38, 67},
        {38, 16},
        {38, 22},
        {96, 46},
        {96, 30},
        {96, 71},
        {96, 8},
        {96, 31},
        {96, 3},
        {96, 28},
        {96, 89},
        {96, 67},
        {96, 12},
        {44, 42},
        {44, 97},
        {44, 2},
        {44, 41},
        {44, 3},
        {44, 31},
        {44, 81},
        {44, 48},
        {44, 57},
        {44, 52},
        {35, 58},
        {35, 81},
        {35, 3},
        {35, 25},
        {35, 38},
        {35, 17},
        {35, 1},
        {35, 12},
        {35, 93},
        {35, 34},
        {25, 23},
        {25, 88},
        {25, 51},
        {25, 50},
        {25, 40},
        {25, 35},
        {25, 14},
        {25, 16},
        {25, 82},
        {25, 11},
        {31, 65},
        {31, 8},
        {31, 11},
        {31, 6},
        {31, 69},
        {31, 87},
        {31, 96},
        {31, 63},
        {31, 49},
        {31, 44},
        {98, 6},
        {98, 36},
        {98, 47},
        {98, 50},
        {98, 95},
        {98, 68},
        {98, 99},
        {98, 29},
        {98, 60},
        {98, 32},
        {67, 65},
        {67, 86},
        {67, 48},
        {67, 76},
        {67, 57},
        {67, 19},
        {67, 38},
        {67, 74},
        {67, 92},
        {67, 96},
        {87, 79},
        {87, 52},
        {87, 3},
        {87, 71},
        {87, 58},
        {87, 31},
        {87, 53},
        {87, 45},
        {87, 56},
        {87, 10},
        {52, 87},
        {52, 45},
        {52, 37},
        {52, 10},
        {52, 29},
        {52, 43},
        {52, 90},
        {52, 89},
        {52, 66},
        {52, 44},
        {56, 75},
        {56, 53},
        {56, 26},
        {56, 97},
        {56, 78},
        {56, 87},
        {56, 27},
        {56, 82},
        {56, 46},
        {56, 30},
        {49, 33},
        {49, 36},
        {49, 76},
        {49, 1},
        {49, 80},
        {49, 31},
        {49, 57},
        {49, 66},
        {49, 12},
        {49, 42}
    };

    return edges;
}

// Function to add an edge to the graph
void addEdge(std::vector<std::vector<int>>& graph, int src, int dest) {
    graph[src].push_back(dest);
    graph[dest].push_back(src);
}

void assignColors(const std::vector<std::vector<int>>& graph, int numVertices, std::vector<int>& colors, std::vector<bool>& availableColors, bool parallel) {
    // Assign colors to remaining V-1 vertices
    for (int vertex = 1; vertex < numVertices; ++vertex) {
        // Initialize available colors for this vertex
        std::fill(availableColors.begin(), availableColors.end(), false);

        // Process all adjacent vertices and mark their colors as unavailable
        for (auto i : graph[vertex]) {
            if (colors[i] != -1) {
                availableColors[colors[i]] = true;
            }
        }

        // Find the first available color
        int color;
        for (color = 0; color < numVertices; ++color) {
            if (!availableColors[color]) {
                break;
            }
        }

        // Assign the found color
        colors[vertex] = color;
        if (!parallel) {
            std::cout << "Coloring vertex " << vertex << " with color " << color << std::endl;

            // Reset the values back to false for the next iteration
            for (auto i : graph[vertex]) {
                if (colors[i] != -1) {
                    availableColors[colors[i]] = false;
                }
            }
        }
    }
}

int dsaturColoring(const std::vector<std::vector<int>>& graph, int numVertices, bool parallel) {
    if (!parallel) {
        std::cout << "\n----------------------" << std::endl;
        std::cout << "Coloring graph with " << graph.size() << " vertices:" << std::endl;
        std::cout << "----------------------" << std::endl;
    }
    std::vector<int> colors(numVertices, -1);
    std::vector<bool> availableColors(numVertices);

    // Color the first vertex (0)
    colors[0] = 0;
    if (!parallel) {
        std::cout << "Coloring vertex 0 with color 0" << std::endl;
    }

    if (parallel) {
#pragma omp parallel for default(none) shared(graph, colors, availableColors, numVertices)
        assignColors(graph, numVertices, colors, availableColors, parallel);
    }
    else {
        assignColors(graph, numVertices, colors, availableColors, parallel);
    }

    // Return the number of colors used.
    std::unordered_set<int> uniqueColors(colors.begin(), colors.end());
    return uniqueColors.size();
}

bool hasNeighbor(const std::vector<std::vector<int>>& graph, int vertex, int neighbor) {
    for (int v : graph[vertex]) {
        if (v == neighbor) {
            return true;
        }
    }
    return false;
}

std::vector<std::vector<int>> generateGraph(const std::vector<Edge> edges, int numVertices) {
    std::vector<std::vector<int>> graph(numVertices);
    for (const auto& edge : edges) {
        if (!hasNeighbor(graph, edge.src, edge.dest)) {
            addEdge(graph, edge.src, edge.dest);
        }
    }

    return graph;
}

void printGraph(const std::vector<std::vector<int>>& graph, int localDegree) {
    int graphSize = graph.size();
    std::cout << "\n----------------------" << std::endl;
    std::cout << "Printing graph with " << graphSize << " vertices:" << std::endl;
    std::cout << "----------------------" << std::endl;
    for (int i = 0; i < graphSize; ++i) {
        std::cout << "Vertex " << i << " is connected to:";
        int vertexSize = graph[i].size();
        for (int j = 0; j < vertexSize; ++j) {
            std::cout << " " << graph[i][j];
        }
        std::cout << std::endl;
        if (vertexSize < localDegree)
            std::cout << "Vertex " << i << " is connected only to " << vertexSize << " vertices" << std::endl;
    }
}

int main() {
    // Generate graph with 50 vertices and local degree of 5
    int numVertices50 = 50;
    int localDegree5 = 5;
    std::vector<Edge> edges50 = getEdgesForGraph50();
    std::vector<std::vector<int>> graph50 = generateGraph(edges50, numVertices50);
    printGraph(graph50, localDegree5);

    // // Generate graph with 100 vertices and local degree of 10
    int numVertices100 = 100;
    int localDegree10 = 10;
    std::vector<Edge> edges100 = getEdgesForGraph100();
    std::vector<std::vector<int>> graph100 = generateGraph(edges100, numVertices100);
    printGraph(graph100, localDegree10);

    // Measure time
    // Sequential execution for 50 vertices
    auto start50Seq = std::chrono::high_resolution_clock::now();
    int minColorsDSatur50Seq = dsaturColoring(graph50, numVertices50, false);
    auto end50Seq = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration50Seq = end50Seq - start50Seq;

    // Parallel execution for 50 vertices
    auto start50Par = std::chrono::high_resolution_clock::now();
    int minColorsDSatur50Par = dsaturColoring(graph50, numVertices50, true);
    auto end50Par = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration50Par = end50Par - start50Par;

    // Sequential execution for 100 vertices
    auto start100Seq = std::chrono::high_resolution_clock::now();
    int minColorsDSatur100Seq = dsaturColoring(graph100, numVertices100, false);
    auto end100Seq = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration100Seq = end100Seq - start100Seq;

    // Parallel execution for 100 vertices
    auto start100Par = std::chrono::high_resolution_clock::now();
    int minColorsDSatur100Par = dsaturColoring(graph100, numVertices100, true);
    auto end100Par = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> duration100Par = end100Par - start100Par;

    // Evaluate performance
    double acceleration50 = duration50Seq / duration50Par;
    double acceleration100 = duration100Seq / duration100Par;
    double scaling = duration100Par / duration50Par;

    std::cout << "\n----------------------" << std::endl;
    std::cout << "50 Vertex Graph Data with Local Degree of 5:" << std::endl;
    std::cout << "----------------------" << std::endl;
    std::cout << "Minimum number of colors: " << minColorsDSatur50Seq << std::endl;
    std::cout << "Sequential execution time: " << duration50Seq.count() << " seconds" << std::endl;
    std::cout << "Parallel execution time: " << duration50Par.count() << " seconds" << std::endl;
    std::cout << "Acceleration: " << acceleration50 << std::endl;

    std::cout << "\n----------------------" << std::endl;
    std::cout << "100 Vertex Graph Data with Local Degree of 10:" << std::endl;
    std::cout << "----------------------" << std::endl;
    std::cout << "Minimum number of colors: " << minColorsDSatur100Seq << std::endl;
    std::cout << "Sequential execution time: " << duration100Seq.count() << " seconds" << std::endl;
    std::cout << "Parallel execution time: " << duration100Par.count() << " seconds" << std::endl;
    std::cout << "Acceleration: " << acceleration100 << std::endl;

    std::cout << "\n----------------------" << std::endl;
    std::cout << "Scaling from 50 to 100 vertex graph: " << scaling << std::endl;
    std::cout << "----------------------" << std::endl;

    return 0;
}